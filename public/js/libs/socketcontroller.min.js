function SocketController(a){"use strict";options=a}var options,socket,messageTypes={CONNECT:"connect",MESSAGE:"message",REQUEST_NUM_OF_USERS:"numberOfUsersInRoom",STATE_CHANGE:"stateChange",GET_STATE:"getState",DBCONNECTOR:"dbconnector"},CONNECTION="connection",JOIN_ROOM="joinRoom",REGISTER="register",STORE_STATE="storeState",REQUEST_NUM_OF_USERS="numberOfUsersInRoom",PRIVATE_MESSAGE="privmessage",SUBSCRIPTIONS="subscriptions",DISCONNECT="disconnect";sendMessageToLog=function(a){"use strict";options.debugMode&&console.log(a)},SocketController.prototype.sendMessageToSocket=function(a){socket.send(a),sendMessageToLog("message to room: "+a)},SocketController.prototype.emitMessageToSocket=function(a,b){socket.emit(a,b),sendMessageToLog("emit message to room: "+a)},SocketController.prototype.registerUser=function(a){var b={userId:a,roomName:options.roomSetup.roomName};this.emitMessageToSocket(REGISTER,b),options.userRegisteredCallBackFunction()},SocketController.prototype.storeState=function(a,b,c){var d={name:b,vo:a,userId:c};sendMessageToLog("store state "+b),this.emitMessageToSocket(STORE_STATE,d)},SocketController.prototype.getNumberOfRegisteredUsersInRoom=function(a){var b={userId:a,room:options.roomSetup.roomName};this.emitMessageToSocket(REQUEST_NUM_OF_USERS,b),sendMessageToLog("request num of users in a room")},SocketController.prototype.getState=function(a,b){sendMessageToLog("get state: "+b);var c={userId:a,room:options.roomSetup.roomName,stateName:b};this.emitMessageToSocket(GET_STATE,c)},SocketController.prototype.connectToSocket=function(a){socket=a.socket,this.listenToMessagesFromSocket()},SocketController.prototype.callDbConnector=function(a,b,c,d){var e={userId:a,methodName:b,room:options.roomSetup.roomName,callBackMethodName:c,params:d};this.emitMessageToSocket("dbconnector",e)},SocketController.prototype.listenToMessagesFromSocket=function(){sendMessageToLog("listenToMessages from room: "+options.roomSetup.roomName),Object.keys(messageTypes).forEach(function(a){socket.on(messageTypes[a],function(b){SocketController.prototype[messageTypes[a]](b)})})},SocketController.prototype[messageTypes.CONNECT]=function(){socket.emit(JOIN_ROOM,options.roomSetup),sendMessageToLog("connect to room: "+options.roomSetup.roomName),options.userConnectedCallBackFunction()},SocketController.prototype[messageTypes.DBCONNECTOR]=function(a){sendMessageToLog("dbconnector message back, methodName: "+a.data.methodName),a.data.hasOwnProperty("callBackMethodName")&&window[a.data.callBackMethodName](a)},SocketController.prototype[messageTypes.MESSAGE]=function(a){sendMessageToLog("message from room"),null!=messageFromRoomCallBackfunction&&messageFromRoomCallBackfunction(a)},SocketController.prototype[messageTypes.REQUEST_NUM_OF_USERS]=function(a){sendMessageToLog("numberOfUsersInRoom message: "+a.size),null!=options.numOfUsersInARoomCallBackFunction&&options.numOfUsersInARoomCallBackFunction(a)},SocketController.prototype[messageTypes.GET_STATE]=function(a){sendMessageToLog("get state results: "+a.name),messageFromRoomCallBackfunction(a.vo)},SocketController.prototype[messageTypes.STATE_CHANGE]=function(a){sendMessageToLog("get state change: "+a.name),options.stateChangeCallBackFunction(a.vo)},SocketController.makeid=function(a){"use strict";var b,c="",d="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";for(b=0;a>b;b++)c+=d.charAt(Math.floor(Math.random()*d.length));return c},"undefined"!=typeof exports&&(exports.socket=socket,exports.options=options,exports.CONNECTION=CONNECTION,exports.CONNECT=CONNECT,exports.MESSAGE=MESSAGE,exports.JOIN_ROOM=JOIN_ROOM,exports.REGISTER=REGISTER,exports.REQUEST_NUM_OF_USERS=REQUEST_NUM_OF_USERS,exports.STORE_STATE=STORE_STATE,exports.STATE_CHANGE=STATE_CHANGE,exports.PRIVATE_MESSAGE=PRIVATE_MESSAGE,exports.GET_STATE=GET_STATE,exports.SUBSCRIPTIONS=SUBSCRIPTIONS,exports.DISCONNECT=DISCONNECT,exports.DBCONNECTOR=DBCONNECTOR,exports.REQUEST_NUM_OF_USERS=REQUEST_NUM_OF_USERS);